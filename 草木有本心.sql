-- redo log 
-- 重做日志,记录的是事务提交时数据页的物理修改,是用来实现事务的持久性。
-- 该日志由两部分组成:重做日志缓存(redo log buffer)以及重做日志文件(redo log file),前者是在内存中,后者在磁盘中。
-- 当事务提交之后会把所有修改信息都存到该日志文件中,用于刷新脏页到磁盘,发生错误时,进行数据恢复使用。

-- undo log 
-- 回滚日志,用于记录数据被修改前的信息,作用包含两个:提供回滚和MVCC(多版本并发控制)。

-- Multi-Version Concurrency Control 多版本并发控制
-- 维护一个数据的多个版本,使得读写操作没有冲突,快照读为MySQL实现MVCC提供了一个非阻塞读功能。
-- MVCC的具体实现:数据库记录中的三个隐式字段、undo log日志、readView。

-- undo log 版本链条
-- 不同事务或相同事务对同一条记录进行修改,会导致该记录的undolog生成一条记录版本链表,链表的头部是最新的记录,链表尾部是最早记录。

-- mysql客户端工具 -u用户名 -p密码 -h域名 -P端口号 -e执行sql语句并退出
mysql [options] [database]

-- mysqladmin:执行管理操作的客户端程序。 

-- mysqlbinlog
-- 由于服务生成的二进制日志文件以二进制格式保存,所以如果想检查这些文本的文本格式,就会使用到mysqlbinlog日志管理工具。

-- mysqlshow
-- 客户端对象查找工具,用来很快地查找存在哪些数据库、数据库中的表、表中的列或者索引。

-- mysqldump
-- 备份数据库或者在不同数据库之间进行数据迁移。

-- 错误日志
-- 记录了当mysqld启动和停止时,以及服务器在运行过程中发生任何严重错误时的相关信息。
-- 当数据库出现任何故障导致无法正常使用时,建议首先查看此日志。
-- 该日志是默认开启的,默认存放目录/var/log/,默认的日志文件名为mysqld.log。
-- 查看日志位置为:show variables '%log_error%'

-- 二进制日志(BINLOG)
-- 记录了所有的DDL(数据定义语言)语句和DML(数据操纵语言)语句,但不包括数据查询(SELECT、SHOW)语句。
-- 作用:灾难时的数据恢复;MySQL的主从复制。
-- 在MySQL8.0版本中,默认二进制日志是开启的。
-- 参数: show variables '%log_in%'。
-- statement(基于SQL语句的日志记录),基于行的日志记录(row),mixed(statement和row两种格式的混合)。

-- 查询日志
-- 记录了客户端的所有操作语句,默认情况下查询日志是未开启的。

-- 慢查询日志
-- 所有执行时间超过参数long_query_time设置值・并且扫描记录数不少于min_examined_row_limit的所有的SQL语句的日志,默认未开启。
-- long_query_time默认为10秒,最小为0,精度可以到微秒。

-- 主从复制(主库Master/从库Slave)
-- 将主数据库的DDL和DML操作通过二进制日志传到从库服务器中,然后在从库上对这些日志重新执行(重做),从而使得从库和主库的数据保持同步。
-- MySQL支持一台主库同时向多台从库复制,从库同时也可以作为其他从服务器的主库,实现链状复制。
-- 作用:主库出现问题,可快速切换到从库提供服务;读写分离,降低主库的访问压力;从库进行备份,避免备份期间影响主库服务。
-- 主从辅助一般流程:
-- Master主库在事务提交时,会把数据变更记录在二进制日志文件Binlog中。
-- 从库读取主库的二进制日志文件Binlog,写入到中继日志Relay Log。
-- slave重做中继日志中的事件,将改变反映它自己的数据。




-- 分库分表

-- 问题分析
-- IO瓶颈:热点数据太多,数据库缓存不足,产生大量磁盘IO,效率较低。请求数据太多,带宽不够,网络IO瓶颈。
-- CPU瓶颈:排序、分组、连接查询、聚合统计等SQL会消耗大量的CPU资源,请求数太多,CPU出现瓶颈。

-- 中心思想:将数据分散存储,使得单一数据库/表的数据量变小来缓解单一数据库的性能问题,从而达到提升数据库性能的目的。

-- 拆分策略:垂直拆分(以表为依据,根据业务将不同表拆分到不同库中)/水平拆分(以字段为依据,按照一定策略，将一个库的数据拆分到多个库中。)。

-- shardingJDBC:基于AOP原理,在应用程序中对本地执行的SQL进行拦截,解析、改写、路由处理。需自行编码配置实现,只支持java语言,性能较高。
-- MyCat:数据库分库分表中间件,不用调整代码即可实现分库分表,支持多种语言,性能不及前者。





