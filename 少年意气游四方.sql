-- MySQL体系结构
-- 连接层：连接处理、授权认证及相关的安全方案。
-- 服务层：SQL接口,并完成缓存查询,SQL的分析及优化,部分内置函数的执行,过程与函数(跨存储引擎功能实现)。
-- 引擎层：负责MySQL中数据的存储和提取,服务器通过API和存储引擎进行通信。
-- 存储层：将数据存储在文件系统之上,并完成与存储引擎的交互。

-- 存储引擎：就是存储数据、建立索引、更新/查询数据等技术的实现方式。
-- 存储引擎是基于表的,而不是基于库的,所以存储引擎也可被称之为表类型。

-- 创建表时,指定存储引擎
create table 表名(
	字段1 字段1类型 [comment 字段1注释],
	......
	字段n 字段n类型 [comment 字段n注释]
)engine = innodb [comment 表注释];

-- 查看当前数据库支持的存储引擎
show engines;

-- InnoDB：高可靠性和高性能的通用引擎,目前默认MySQL存储引擎。
-- DML操作遵循ACID模型,支持事务;
-- 行级锁,提高并发访问性能;
-- 支持外键foreign key 约束,保证数据的完整性和准确性。

-- xxx.ibd：xxx代表表名,innoDB引擎的每张表都会对应这样一个表空间文件,存储该表的表结构(frm、sdi)、数据和索引。
-- 参数：innodb_file_per_table(默认打开)

-- MyISAM：MySQL早期的默认存储引擎。
-- 不支持事务,不支持外键;
-- 支持表锁,不支持行锁;
-- 访问速度快。
-- xxx.sdi：存储表结构信息;xxx.MYD：存储数据;xxx.MYI：存储索引。

-- Memory：表数据存储在内存中,只能为临时表提供缓存使用。
-- hash索引(默认),xxx.sdi(存储表结构信息)。
-- 对表的大小有限制,太大的表无法缓存在内存中,而且无法保障数据的安全性。


-- 索引(index)：帮助MySQL高效获取数据的数据结构(有效)。
-- 在数据之外,数据库系统还维护着满足特定查找算法的数据结构,这些数据结构以某种方式引用(指向)数据,这种数据结构就是索引。
-- 优点：提高数据检索效率,降低数据的IO成本。提高索引列对数据进行排序,降低数据排序的成本,降低CPU消耗。
-- 缺点：索引列也是要占用空间。降低更新表的速度,如对表进行insert、update、delete时,效率降低。

-- 索引结构：B+Tree索引(最常见)、Hash索引(不支持范围查询)、R-tree(空间索引/地理空间数据)及Full-text(全文索引)。

-- 二叉树缺点：顺序插入时,会形成一个链表,查询性能大大降低。大数据量情况下,层级较深,检索速度慢。
-- 红黑数：大数据量情况下,层级较深,检索速度慢。

-- B-Tree(多路平衡查找树)
-- 以一颗最大度数为5(5阶)的B-Tree为例(每个节点最多存储4个key,5个指针)。
-- 树的度数：一个节点的子节点个数。

-- B+Tree：所有的数据都会出现在叶子节点,叶子节点形成一个单向链表。
-- MySQL索引数据结构对经典的B+Tree进行了优化,在原B+Tree的基础上,增加一个指向相邻叶子节点的链表指针,就形成了带有顺序指针的B+Tree,提高区间访问的性能。

-- Hash：哈希索引就是采用一定的hash算法,将键值换算成新的hash值,映射到对应的槽位上,然后存储在hash表中。
-- 如果两个(或多个)键值,映射到一个相同的槽位上,他们就产生了hash冲突(hash碰撞),可以通过链表来解决。
-- Hash索引只能用于对等比较(=,in),不支持范围查询(between,>,<,...);无法利用索引完成排序操作;查询效率高,通常只需要以此检索就可以了,效率通常高于B+Tree索引。

-- 在MySQL中,支持hash索引的是Memory引擎,而InnoDB中具有自适应hash功能,Hash索引是存储引擎根据B+Tree索引在指定条件自动构建的。

-- 为什么InnoDB存储引擎选择适应B+Tree索引结构?
-- 相对于二叉树,层级更少,搜索效率更高;
-- 相对于B-Tree,无论是叶子节点还是非叶子节点,都会保存数据,这样导致一页中存储的键值减少,指针跟着减少,要保存同样大量数据,只能增加树的高度,导致性能降低。
-- 相对于Hash索引,B+Tree支持范围匹配及排序操作。

-- 索引分类
-- 主键索引(PRIMARY):针对于表中的主键创建的索引,默认自动创建,只能有一个。
-- 唯一索引(UNIQUE)：避免同一个表中某数据列中的值重复,可以有多个。
-- 常规索引：快速定位特定数据,可以有多个。
-- 全文索引(FULLTEXT)：全文索引查找的是文本中的关键词,而不是比较索引中的关键词,可以有多个。

-- 在InnoDB存储引擎中,根据索引的存储形式,又可以分为以下两种:
-- 聚集索引(Clustered Index)：将数据存储和索引放到一块,索引结构的叶子节点保存了行数据,必须有且只有一个。
-- 1.如果存在主键,主键索引就是聚集索引;
-- 2.如果不存在主键,将使用第一个唯一(UNIQUE)索引作为聚集索引;
-- 3.如果表没有主键,或没有合适的唯一索引,则InnoDB会自动生成一个rowid作为隐藏的聚集索引。
-- 二级索引(Secondart Index)：将数据与索引分开存储,索引结构的叶子节点关联的是对应的主键,可以存在多个。

-- 回表查询：先根据二级索引查到对应的主键值,再根据聚集索引查到对应所在的数据记录。


